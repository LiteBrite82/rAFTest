/* duplicated in multi/index.css */
select, label, pre {
  font-weight:400;
}
#controls {
  padding: 0.5rem 0;  /* different from multi/index.css */
  background-color:var(--bg-white);
}
#x {
  flex-grow: 1;
  width:auto;
  padding:0.5rem 0;
  margin-right:0.25rem;
}
#compare {
  font-size:  1.75rem;
  margin-left:-1px;    /* I couldn't find another way to align it */
}
#stop { margin:0 0.5rem }

.slash {
  position:relative;
  top:1px;
  font-size:calc(1rem + var(--8th));
  margin:0 var(--8th);
}

.font400 { font-weight:400 }

.ml3-8  { margin-left:  var(--3-8ths) }

.counter  { /* only partially duplicated, padding is different */
  align-items:baseline;
  margin:0;
  padding-top:var(--16th);
  color:var(--dark-blue);
}
/* not duplicates */
html * {
  accent-color:#111;
}
body {
  margin:0;
  height:100vh;
}
button, input[type=text],
select, span {
  color:var(--charcoal);
}
.colorjs {
  color:rgb(85, 142, 121);
}
input[type=text] { /* #startColor, #endColor */
  flex-grow: 1;
  align-self:stretch;
  border:var(--border-gray);
  outline:none;
}
input[type=text]:focus {
  z-index:1;
  border-color:black;
}
input.invalid {
  background-color:rgb(139 0 0 / 0.1);
  border-color: darkred;
  outline-color:darkred;
}
#triptych {
  display:grid;
  grid-template-columns:calc(1rem + var(--5-8ths)) 1fr 1fr;
  grid-template-rows:   calc(1rem + var(--11-16ths)) repeat(4, 1.5rem);
  justify-items:start;  /* defaults to stretch */
  align-items:  start;  /* ditto */
}
.black, span.black {
  color:black;
}
.symSpan, .display, .number {
  color:var(--darker-gray);
}
.symSpan {
  font-family:"Material Symbols Rounded";
  font-size:calc(1rem + var(--7-16ths));
  justify-self:center;
  cursor:default;
}
.display {
  font-weight:400;
  padding-top:1px;
}
.number {
  height:     1.5rem; /* grid row height, how to get it using attr()?? */
  padding-top:1px;
}
.left {
  margin-left:0.5rem;
}
.right {
  margin-left:var(--5-8ths);
}
.number.right {
  margin-left: var(--3-16ths);
  padding-left:var(--3-8ths);
  border-left: var(--border-gray);
}
#canvas {
  z-index:-1;
  position:absolute;
  width: 100vw;
  height:100vh;
  align-items:stretch;
}
#startCanvas, #endCanvas {
  align-self:stretch;
  width:calc(1rem + var(--9-16ths)); /* same as <select> height */
  border:1px solid black;
}
#leftCanvas, #rightCanvas { /* children of #canvas */
  width:50%;
}
#time {
  width: 7ch;
  flex-grow: 1;
  margin-left:0.5rem;
}
#type {
  border: none;
  outline:none;
  color:var(--charcoal);
}
.spaces {
  padding-top:0;
  padding-bottom:var(--3-16ths);
}
.symBtn {
  border:none;
  background-color:transparent;
}
.symBtn:disabled {
  background-color:transparent;
}
button:hover:not(:disabled),
button:active:hover {
  color:black; /* overwrites common.css for both selectors */
  background-color:#DDD;
}
/* <state-button> overrides - #play, #stop */
state-button {
  opacity:1;
  fill  :black;
  stroke:black;
  stroke-width:2px;
}
state-button:hover {
  fill  :black;
  stroke:black; /* necessary to override common.css */
  stroke-width:4px;
}
state-button:active {
  fill:  none;
  stroke:black; /* necessary to override common.css */
  stroke-width:3px;
}
@media (width < 375px) { /* squeeze it into 360px */
  span  { font-size:var(--15-16ths) }
}